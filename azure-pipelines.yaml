name: 2.1$(Rev:.r)

# Define variables
variables:
  shareAccounts: turtlesystems
  connectedServiceName: Azure DevOps Extension Pub Token

stages:
- stage: Build
  displayName: "Build:"
  jobs:

  # Create a job that installs the NPM modules, performs the linting tests and
  # creates the extension package
  - job: setup_and_build
    displayName: Setup & Build    
    pool:
      vmImage: ubuntu-latest

    steps:

    # Install all the dependent NPM modules as required by the tasks
    - task: Npm@1
      displayName: 'Install NPM Modules'
      inputs:
        verbose: $(System.Debug)

    # Build the extension
    - task: Npm@1
      displayName: 'Build Extension'
      inputs:
        command: custom
        customCommand: 'run all'
        verbose: $(System.Debug)

    # Upload tests
    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: 'junit.xml'
        searchFolder: '$(build.sourcesdirectory)/build/tests'    

    # Upload coverage
    - task: PublishCodeCoverageResults@1
      inputs:
        codeCoverageTool: 'Cobertura'
        summaryFileLocation: '$(build.sourcesdirectory)/build/tests/coverage/cobertura-coverage.xml'
        reportDirectory: '$(build.sourcesdirectory)/build/tests/coverage'    

    # Copy the build artifacts to the staging directory
    - task: CopyFiles@2
      displayName: 'Copy Preview Files to: Artefact Directory'
      inputs:
        SourceFolder: '$(build.sourcesdirectory)/build'
        Contents: 'chef-software.chef-preview-$(Build.BuildNumber).vsix'
        TargetFolder: '$(build.artifactstagingdirectory)/preview'

    - task: CopyFiles@2
      displayName: 'Copy Production Files to: Artefact Directory'
      inputs:
        SourceFolder: '$(Build.SourcesDirectory)/build'
        Contents: 'chef-software.chef-$(Build.BuildNumber).vsix'
        TargetFolder: '$(build.artifactstagingdirectory)/production'

    - task: PublishPipelineArtifact@1
      displayName: Publish Extension packages
      inputs:
        targetPath: $(Build.ArtifactStagingDirectory)
        artifact: build

- stage: Deploy
  jobs:
  - deployment: azdo_extension_preview
    displayName: Publish Preview Extension
    pool:
      vmImage: ubuntu-latest
    environment: 'Preview'
    strategy:
      runOnce:
        deploy:
          steps:

            - task: ms-devlabs.vsts-developer-tools-build-tasks.tfx-installer-build-task.TfxInstaller@2
              displayName: 'Use Node CLI for Azure DevOps (tfx-cli): v0.6.x'

            - task: PublishAzureDevopsExtension@2
              displayName: Publish
              inputs:
                connectedServiceName: $(connectedServiceName)
                fileType: vsix
                vsixFile: $(Pipeline.Workspace)/build/preview/*.vsix

            - task: ShareAzureDevopsExtension@2
              displayName: Share
              inputs:
                connectedServiceName: $(connectedServiceName)
                method: vsix
                vsixFile: $(Pipeline.Workspace)/build/preview/*.vsix
                accounts: $(shareAccounts)


#  - deployment: azdo_extension_release
#    displayName: Publish Release Extension
#    pool:
#      vmImage: ubuntu-latest
#    environment: 'Release'
#    strategy:
#      runOnce:
#        deploy:
#          steps:
#            - task: DownloadPipelineArtifact@2
#              inputs:
#                buildType: current
#                itemPattern: preview/*.vsix
#                targetPath: $(Pipeline.Workspace)
#
#            - task: PublishAzureDevopsExtension@2
#              displayName: Publish
#              inputs:
#                connectedServiceName: $(connectedServiceName)
#                fileType: vsix
#                vsixFile: $(Pipeline.Workspace)/release/*.vsix


